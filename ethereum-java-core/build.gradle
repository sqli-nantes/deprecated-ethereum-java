buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.1"
}

bintray {
    user = project.hasProperty('BINTRAY_USER') ? project.property('BINTRAY_USER') : System.getenv('BINTRAY_USER')
//    key = project.hasProperty('BINTRAY_API_KEY') ? project.property('BINTRAY_API_KEY') : System.getenv('BINTRAY_API_KEY')
    key = "a4c0bf1077679aa5faefd2e46f84295982d251a7"
    publications = ['EthJavaMavenPublication']
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    override = true
    pkg {
        repo = 'ethereum-java'
        name = 'ethereum-java-core'
        userOrg = 'sqli-nantes'
        licenses = ['MIT']
        labels = ['ethereum', 'java', 'blockchain']
        vcsUrl = 'https://github.com/sqli-nantes/ethereum-java/ethereum-java-core/'
        version {
            name = '0.1.' + (new Date()).format('yyyyMMdd')
            desc = 'Ethereum-Java library'
            released  = new Date()
            vcsTag = '0.1.' +(new Date()).format('yyyyMMdd')
        }
    }
}

apply plugin: 'java'
apply plugin: "maven-publish"

publishing {
    publications {
        EthJavaMavenPublication(MavenPublication) {
            from components.java
            artifact sourceJar
            pom.withXml {
                asNode().appendNode('description', 'Ethereum Java library')
            }
            groupId 'com.sqli.ethereum-java'
            artifactId 'ethereum-java-core'
            version '0.1.' + (new Date()).format('yyyyMMdd')
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.111-beta'
    testCompile 'pl.pragmatists:JUnitParams:1.0.5'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.google.code.gson:gson:2.7'
    compile 'org.json:json:20160810'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

sourceSets {
    test {
        resources {
            exclude 'data/**'
        }
    }
}


task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}
